---
# Prerequisites Role
# Handles initial setup: user creation, sudo, repo tweaks, Nala/Brew install.
# Assisted by Cline (powered by xAI Grok model) on 2025-09-25.
# Updated for broader OS support on 2025-10-02.

- name: Update package cache (Debian/Ubuntu)
  apt:
    update_cache: yes
  when: ansible_os_family == 'Debian'
  tags: prerequisites

- name: Update package cache (RedHat/CentOS/Fedora/Rocky)
  dnf:
    update_cache: yes
  when: ansible_os_family == 'RedHat'
  tags: prerequisites

- name: Update package cache (Archlinux)
  pacman:
    update_cache: yes
  when: ansible_distribution == 'Archlinux' or ansible_distribution == 'Arch'
  tags: prerequisites

- name: Update package cache (SUSE/openSUSE)
  zypper:
    refresh: yes
  when: ansible_os_family == 'Suse'
  tags: prerequisites

- name: Update package cache (Alpine)
  apk:
    update_cache: yes
  when: ansible_os_family == 'Alpine'
  tags: prerequisites

# Note: For other OS families, package cache update might be manual or not required.

- name: Create non-root user if enabled (only when running as root)
  user:
    name: "{{ target_user }}"
    # Add to sudo (Debian/Ubuntu) or wheel (RedHat/Fedora/Rocky) by default.
    # For Arch, 'wheel' is common. For SUSE, 'users' or specific admin groups.
    # Docker group will be handled by the docker-setup role.
    groups: "{{ 'sudo' if ansible_os_family == 'Debian' else 'wheel' }}"
    shell: /bin/bash
    create_home: yes
    state: present
  when:
    - create_new_user
    - ansible_user_id == 'root'
  tags: prerequisites

- name: Set up sudo for non-root user (Debian/Ubuntu)
  lineinfile:
    path: /etc/sudoers
    state: present
    regexp: '^%sudo'
    line: '%sudo ALL=(ALL:ALL) ALL'
    validate: 'visudo -cf %s'
  when: ansible_os_family == 'Debian'
  tags: prerequisites

- name: Set up sudo for non-root user (RedHat/Fedora/Rocky)
  lineinfile:
    path: /etc/sudoers
    state: present
    regexp: '^%wheel'
    line: '%wheel ALL=(ALL) NOPASSWD: ALL'
    validate: 'visudo -cf %s'
  when: ansible_os_family == 'RedHat'
  tags: prerequisites

# For Archlinux, 'wheel' group is used for sudo. Usually configured during install.
# For SUSE, 'users' group or specific admin groups like 'wheel' might be used.
# For Alpine, 'wheel' group is used, and 'sudo' package needs to be installed.

- name: Add current non-root user to sudo group if they lack privileges
  user:
    name: "{{ ansible_user_id }}"
    groups: "{{ 'sudo' if ansible_os_family == 'Debian else 'wheel' }}"
    append: yes
  when:
    - ansible_user_id != 'root'
    - not ansible_user_sudo
  tags: prerequisites

- name: Install Nala on Debian-based (if available and preferred)
  apt:
    name: nala
    state: present
  when: ansible_os_family == 'Debian' and ansible_distribution_major_version | int >= 22 # Nala requires Ubuntu 22.04+
  tags: prerequisites

- name: Disable CD-ROM in sources.list (Debian/Ubuntu)
  lineinfile:
    path: /etc/apt/sources.list
    regexp: '^deb cdrom:'
    state: absent
  when: ansible_os_family == 'Debian'
  tags: prerequisites

- name: Enable default repos and update (Debian/Ubuntu)
  lineinfile:
    path: /etc/apt/sources.list
    line: 'deb http://archive.ubuntu.com/ubuntu {{ ansible_distribution_release }} main restricted universe multiverse'
    create: yes
  when: ansible_os_family == 'Debian' and ansible_distribution == 'Ubuntu' # Be specific for Ubuntu repos
  tags: prerequisites

- name: Tweak dnf.conf for performance (RedHat/Fedora/Rocky)
  ini_file:
    path: /etc/dnf/dnf.conf
    section: main
    option: "{{ item.option }}"
    value: "{{ item.value }}"
  loop:
    - { option: 'max_parallel_downloads', value: '10' }
    - { option: 'defaultyes', value: 'True' }
    - { option: 'keepcache', value: 'True' }
    - { option: 'fastestmirror', value: 'True' }
  when: ansible_os_family == 'RedHat'
  tags: prerequisites

- name: Install dnf-plugins-core for Fedora/Rocky
  package:
    name: dnf-plugins-core
    state: present
  when: ansible_os_family == 'RedHat'
  tags: prerequisites

- name: Add Fedora rpm-fusion free repo
  dnf:
    name: https://mirrors.rpmfusion.org/free/fedora/rpmfusion-free-release-{{ ansible_distribution_major_version }}.noarch.rpm
    state: present
  when: ansible_distribution == 'Fedora'
  ignore_errors: yes # Continue even if already added
  tags: prerequisites

- name: Add Fedora rpm-fusion nonfree repo
  dnf:
    name: https://mirrors.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-{{ ansible_distribution_major_version }}.noarch.rpm
    state: present
  when: ansible_distribution == 'Fedora'
  ignore_errors: yes # Continue even if already added
  tags: prerequisites

- name: DNF upgrade and groupupdate for Fedora (after repos added)
  dnf:
    name: '*'
    state: latest
  when: ansible_distribution == 'Fedora'
  tags: prerequisites

- name: Swap FFmpeg for Fedora (ensure non-free is used)
  shell: dnf -y swap ffmpeg-free ffmpeg --allowerasing
  when: ansible_distribution == 'Fedora'
  ignore_errors: yes
  tags: prerequisites

- name: Install codecs on Fedora/Rocky
  package:
    name: libavcodec-freeworld
    state: present
  when: ansible_os_family == 'RedHat'
  ignore_errors: yes # Continue even if swap fails (e.g., ffmpeg-free not installed)
  tags: prerequisites


- name: Install Brew on macOS if not present
  homebrew:
    name: homebrew
    state: present
  when: ansible_os_family == 'Darwin'
  tags: prerequisites

- name: Update package cache (general - after specific updates)
  meta: flush_handlers
  tags: prerequisites

- name: Install Nix on Linux/macOS (multi-user)
  shell: |
    curl --proto '=https' --tlsv1.2 -sSf -L https://install.determinate.systems/nix | sh -s -- --profile /nix/var/nix/profiles/default --switch-profile
  args:
    creates: /nix/var/nix/profiles/default
  become: true
  when: nix_multi_user | bool and ansible_os_family != 'Darwin' # Nix on macOS is different, usually user-installed
  tags: prerequisites

- name: Add Nix to PATH for user (Linux)
  lineinfile:
    path: "{{ target_user_home }}/.zshrc"
    line: 'source /nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh'
    create: yes
  become_user: "{{ target_user }}"
  when: nix_multi_user | bool and ansible_os_family != 'Darwin'
  tags: prerequisites

- name: Add Nix to /etc/skel/.zshrc (Linux)
  lineinfile:
    path: /etc/skel/.zshrc
    line: 'source /nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh'
    create: yes
  when: nix_multi_user | bool and ansible_os_family != 'Darwin'
  tags: prerequisites

- name: Create user directories
  file:
    path: "{{ target_user_home }}/{{ item }}"
    state: directory
    mode: '0755'
  become_user: "{{ target_user }}"
  loop:
    - "{{ user_docker_dir }}"
    - "{{ user_syncthing_data }}"
    - "{{ user_nix_dir }}"
    - "{{ fonts_dir }}"
  tags: prerequisites

- name: Create skel directories
  file:
    path: /etc/skel/{{ item }}
    state: directory
    mode: '0755'
  loop:
    - "{{ user_docker_dir }}"
    - "{{ user_syncthing_data }}"
    - "{{ user_nix_dir }}"
    - "{{ fonts_dir }}"
  tags: prerequisites

- name: Prompt for new user name if needed (only when running as root)
  pause:
    prompt: "Enter username for new user on {{ inventory_hostname }} (default: {{ target_user }}): "
    echo: yes
  register: new_user_input
  when:
    - create_new_user
    - ansible_user_id == 'root'
  tags: prerequisites

- name: Set target_user from prompt if provided (only when running as root)
  set_fact:
    target_user: "{{ new_user_input.user if new_user_input.user is defined and new_user_input.user != '' else target_user }}"
  when:
    - create_new_user
    - ansible_user_id == 'root'
  tags: prerequisites

- name: Debug prerequisites complete
  debug:
    msg: "Prerequisites setup complete for {{ package_mgr }} on {{ ansible_distribution }} ({{ ansible_os_family }})."
  tags: prerequisites
